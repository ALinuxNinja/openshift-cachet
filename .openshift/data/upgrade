#####################################################
## Management Utility for openshift-cachet         ##
## Created by ALinuxNinja 2015                     ##
## https://github.com/ALinuxNinja/openshift-cachet ##
#####################################################

## Settings
SUPPORTED_VER="v1"

## Stick some functions here
backup() {
	echo "Performing Backup..."
	## Backup SQL
	mysqldump -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE > $OPENSHIFT_DATA_DIR/dbdump.sql
	## Backup repo + .sql
	cd $OPENSHIFT_REPO_DIR
	tar czf $OPENSHIFT_DATA_DIR/backup.tar.gz Cachet -C $OPENSHIFT_DATA_DIR dbdump.sql
	rm ../data/dbdump.sql
	echo "Backup created at $OPENSHIFT_DATA_DIR/backup.tar.gz"
}

upgrade() {
	echo "Performing Upgrade..."
	## Check for upgrade
	## Remove original Cachet install
	## Extract new Cachet install to repo
	## Composer
	## Migrate tables
}

## Output some nice ASCII
echo "################################################"
echo "## Management Utility for Cachet on OpenShift ##"
echo "## Created by ALinuxNinja 2015                ##"
echo "## Current Version: 1.0                       ##"
echo "## Please report bugs to the Github repo      ##"
echo "################################################"
echo "== Upgrade Utility Update =="
echo "Installed Version:$(md5sum mgmutil)"
echo "== Upgrade Information =="
## Get Latest Cachet Version that's supported
CACHET_DL_LINK=$(curl -s https://github.com/cachethq/Cachet/releases | grep "tar.gz" | grep -i "$SUPPORTED_VER" | head -n 1 | sed -e 's/^.*"\///;s/".*//')
CACHET_DL_VERSION=$(echo $CACHET_DL_LINK | sed -e 's#cachethq/Cachet/archive/v\(.*\).tar.gz#\1#')

## Check Current Cachet Version
echo "Installed Version: $CACHET_VERSION"
echo "Latest Supported Version: $CACHET_DL_VERSION"
## Can we upgrade?
if [[ $CACHET_VERSION < $CACHET_DL_VERSION ]]; then
	echo "Upgrade Status: Upgrade Avaliable"
else
	echo "Upgrade Status:No Upgrade Avaliable"
fi
echo ""
echo "Note from ALinuxNinja: Cachet v2 is not supported yet, support is coming soon!"

## Do a check for the **old** hhvm setups
if [[ -d $HOME/hhvm ]]; then
	echo "== WARNING =="
	echo "Old HHVM setup detected"
	echo "Upgrade is NOT supported on the old HHVM setups."
	echo "Please do an backup and restore."
fi
while true; do
	echo "== Options =="
	echo "a) Create Backup"
	echo "b) Perform Upgrade"
	echo ""
	echo -n "Please enter your option: "
	read optioncontent
	echo ""
	case $optioncontent in
	a) backup; exit ;;
	b) upgrade; exit ;;
	?) echo "error: Unknown Option"; exit ;;
		esac
done
