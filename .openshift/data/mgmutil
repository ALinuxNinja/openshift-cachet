#####################################################
## Management Utility for openshift-cachet         ##
## Created by ALinuxNinja 2016                     ##
## https://github.com/ALinuxNinja/openshift-cachet ##
#####################################################

## Settings
SUPPORTED_VER="v1\|v2"

## Stick some functions here
function php() { $OPENSHIFT_PHP_VERSION_DIR/bin/php "$@" ;}
function composer () { $OPENSHIFT_PHP_VERSION_DIR/bin/php $OPENSHIFT_DATA_DIR/bin/composer.phar "$@" ;}
backup() {
	echo "Performing Backup..."
	## Backup SQL
	mysqldump -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE > $OPENSHIFT_DATA_DIR/dbdump.sql
	## Backup Needed ENVs
	mkdir -p $OPENSHIFT_DATA_DIR/
	## Backup repo + .sql
	cd $OPENSHIFT_REPO_DIR
	tar czf $OPENSHIFT_DATA_DIR/backup.tar.gz Cachet -C $OPENSHIFT_DATA_DIR dbdump.sql -C ~/.env/ user_vars
	rm ../data/dbdump.sql
	echo "Backup created at $OPENSHIFT_DATA_DIR/backup.tar.gz"
}

upgrade() {
	if [[ $UPGRADE_AVAILABLE != True ]]; then
		echo "No Upgrade Available"
	else
		backup
		cp $OPENSHIFT_REPO_DIR/Cachet/.env $OPENSHIFT_REPO_DIR/env

		echo "Performing Upgrade..."
		CACHET_DL_LINK=$(curl -s https://github.com/cachethq/Cachet/releases | grep "tar.gz" | grep -i "$SUPPORTED_VER" | head -n 1 | sed -e 's#.*href="\(.*\)" .*#\1#')
		CACHET_DL_VERSION=$(curl -s https://github.com/cachethq/Cachet/releases | grep "tar.gz" | grep -i "$SUPPORTED_VER" | head -n 1 | sed -e 's#.*archive\/v\(.*\)\.tar\.gz.*#\1#')
		echo "$CACHET_DL_VERSION" > ~/.env/user_vars/CACHET_VERSION

		echo "Downloading Cachet..."
		curl -L https://github.com/$(echo $CACHET_DL_LINK) > $OPENSHIFT_DATA_DIR/Cachet.tar.gz

		echo "Extracting Cachet..."
		rm -rf $OPENSHIFT_REPO_DIR/Cachet
		tar xvf $OPENSHIFT_DATA_DIR/Cachet.tar.gz -C $OPENSHIFT_DATA_DIR
		mv $OPENSHIFT_DATA_DIR/Cachet-* $OPENSHIFT_REPO_DIR/Cachet
		rm $OPENSHIFT_DATA_DIR/Cachet.tar.gz
		echo "Installing new version"
		cd $OPENSHIFT_REPO_DIR/Cachet

		## Fix PHP Paths
		sed -i -e "s#php artisan#$OPENSHIFT_PHP_VERSION_DIR/bin/php artisan#g" $OPENSHIFT_REPO_DIR/Cachet/composer.json
		sed -i -e "s#php -r#$OPENSHIFT_PHP_VERSION_DIR/bin/php -r#g" $OPENSHIFT_REPO_DIR/Cachet/composer.json

		## Move ENV back
		cp $OPENSHIFT_REPO_DIR/env $OPENSHIFT_REPO_DIR/Cachet/.env

		## Composer install
		composer install --prefer-source --no-interaction --no-dev -o

		## Migrate Database
		php artisan migrate --force
	fi
}
function version_gt() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1"; }

## Output some nice ASCII
echo "################################################"
echo "## Management Utility for Cachet on OpenShift ##"
echo "## Created by ALinuxNinja 2016                ##"
echo "## Current Version: 1.1                       ##"
echo "## Please report bugs to the Github repo      ##"
echo "################################################"
echo "== Upgrade Information =="
## Get Latest Cachet Version that's supported
CACHET_DL_VERSION=$(curl -s https://github.com/cachethq/Cachet/releases | grep "tar.gz" | grep -i "$SUPPORTED_VER" | head -n 1 | sed -e 's#.*archive\/v\(.*\)\.tar\.gz.*#\1#')

## Check Current Cachet Version
echo "Installed Version: $CACHET_VERSION"
echo "Latest Supported Version: $CACHET_DL_VERSION"
## Can we upgrade?
if version_gt $CACHET_DL_VERSION $CACHET_VERSION; then
	echo "Upgrade Status: Upgrade Avaliable"
	UPGRADE_AVAILABLE=True
else
	echo "Upgrade Status:No Upgrade Avaliable"
	UPGRADE_AVAILABLE=False
fi

## Do a check for the **old** hhvm setups
if [[ -d $HOME/hhvm ]]; then
	echo "== WARNING =="
	echo "Old HHVM setup detected"
	echo "Upgrade is NOT supported on the old HHVM setups."
	echo "Please do an backup and restore."
fi
while true; do
	echo "== Options =="
	echo "a) Create Backup"
	echo "b) Perform Upgrade"
	echo ""
	echo -n "Please enter your option: "
	read optioncontent
	echo ""
	case $optioncontent in
	a) backup; exit ;;
	b) upgrade; exit ;;
	?) echo "error: Unknown Option"; exit ;;
		esac
done
